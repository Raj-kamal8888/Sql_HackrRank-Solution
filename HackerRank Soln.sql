--Query I
SELECT *
FROM CITY
WHERE COUNTRYCODE ='USA' AND POPULATION > 100000;
--Query 2
SELECT NAME
FROM CITY 
WHERE COUNTRYCODE = 'USA' AND POPULATION > 120000;
--Query 3
SELECT * 
FROM CITY;
--Query 4
SELECT *
FROM CITY 
WHERE ID = 1661;
--Query 5
SELECT * 
FROM CITY
WHERE COUNTRYCODE = 'JPN';
--Query 6
SELECT CITY, STATE
FROM STATION;
--Query 7
SELECT DISTINCT CITY 
FROM STATION 
WHERE ID%2=0;
--Query 8
SELECT COUNT(CITY) - COUNT(DISTINCT CITY)
FROM STATION;
--Query 9
SELECT CITY, LENGTH(CITY)
FROM station 
ORDER BY LENGTH(CITY), CITY LIMIT 1; 
--Query 10
SELECT CITY, LENGTH(CITY)
FROM station 
ORDER BY LENGTH(CITY) DESC, CITY LIMIT 1; 
--Query 11
SELECT DISTINCT CITY 
FROM STATION
WHERE CITY REGEXP '^[aeiouAEIOU]';
--Query 12
SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP '[aeiouAEIOU]$';
--Query 13
SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP '^[aeiouAEIOU].*[aeiouAEIOU]$';
--Query 14
SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP '^[^aeiouAEIOU]';
--Query 15
SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP '[^aeiouAEIOU]$';
--Query 16
SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP '^[^aeiouAEIOU]' OR CITY REGEXP '[^aeiouAEIOU]$'
--Query 17
SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP '^[^aeiouAEIOU]' AND CITY REGEXP '[^aeiouAEIOU]$';
--Query 17
SELECT NAME 
FROM STUDENTS 
WHERE MARKS > 75 
ORDER BY RIGHT(NAME, 3), ID ASC;
--Query 18
SELECT NAME
FROM EMPLOYEE
ORDER BY NAME;
--Query 19
SELECT NAME
FROM EMPLOYEE 
WHERE SALARY > 2000 AND MONTHS < 10
ORDER BY EMPLOYEE_ID;
--Revising the count fn
SELECT COUNT(POPULATION)
FROM CITY
WHERE POPULATION > 100000
--Revising the sum fn
SELECT SUM(POPULATION)
FROM CITY
WHERE DISTRICT = 'California';
--Revising the Avg fn
SELECT AVG(POPULATION)
FROM CITY
WHERE DISTRICT = 'California';
-Revising the Floor fn with Avg fn
SELECT FLOOR(AVG(POPULATION))
FROM CITY
--Japan total population
SELECT SUM(POPULATION)
FROM CITY
WHERE COUNTRYCODE = 'JPN';
--Population Density Difference
SELECT MAX(POPULATION)-MIN(POPULATION)
FROM CITY;
-- The Blunder
SELECT CEIL(AVG(Salary)-AVG(REPLACE(Salary,'0',''))) 
FROM EMPLOYEES;
--Top Earners
SELECT MAX(SALARY*MONTHS), COUNT(*)
FROM EMPLOYEE
WHERE (SALARY*MONTHS) = (SELECT MAX(SALARY*MONTHS)FROM EMPLOYEE);
--Weather Observation Station 2
SELECT ROUND(SUM(LAT_N),2), ROUND(SUM(LONG_W),2)
FROM STATION
--Weather Observation Station 13
SELECT ROUND(SUM(LAT_N),4)
FROM STATION
WHERE LAT_N > 38.7880 AND LAT_N < 137.2345;
--Weather Observation Station 14
SELECT ROUND(MAX(LAT_N),4)
FROM STATION
WHERE LAT_N < 137.2345;
--Weather Observation Station 15
SELECT ROUND(LONG_W,4)
FROM STATION
WHERE LAT_N = (
    SELECT MAX(LAT_N)
    FROM STATION
    WHERE LAT_N < 137.2345
);
--Weather Observation Station 16
SELECT ROUND(MIN(LAT_N),4)
FROM STATION
WHERE LAT_N > 38.7780;
Weather Observation Station 17
SELECT ROUND(LONG_W,4)
FROM STATION
WHERE LAT_N = (
    SELECT MIN(LAT_N)
    FROM STATION
    WHERE LAT_N > 38.7780
);
--Weather Observation Station 18
SELECT ROUND(ABS(MIN(LAT_N)-MAX(LAT_N))+ABS(MIN(LONG_W)-MAX(LONG_W)),4)
FROM STATION;
--Weather Observation Station 19
SELECT ROUND(SQRT(POWER(MIN(LAT_N)-MAX(LAT_N),2)+POWER(MIN(LONG_W)-MAX(LONG_W),2)),4)
FROM STATION;
--Weather Observation Station 20
SELECT ROUND(S.LAT_N, 4) FROM STATION S 
    WHERE 
        (SELECT COUNT(LAT_N) FROM STATION WHERE LAT_N > S.LAT_N) 
        = (SELECT COUNT(LAT_N) FROM STATION WHERE LAT_N < S.LAT_N);
--Asian Population
SELECT SUM(CITY.POPULATION)
FROM CITY 
INNER JOIN COUNTRY 
ON CITY.COUNTRYCODE = COUNTRY.CODE 
WHERE COUNTRY.CONTINENT = 'Asia';
--African Cities
SELECT CITY.NAME
FROM CITY
INNER JOIN COUNTRY 
ON CITY.COUNTRYCODE = COUNTRY.CODE 
WHERE COUNTRY.CONTINENT = 'Africa';
--Average Population of Each Continent
SELECT COUNTRY.CONTINENT, FLOOR(AVG(CITY.POPULATION))
FROM CITY
INNER JOIN COUNTRY 
ON CITY.COUNTRYCODE = COUNTRY.CODE
GROUP BY COUNTRY.CONTINENT;
--The Report
SELECT IF(GRADES.GRADE>=8, STUDENTS.NAME, NULL),GRADES.GRADE, STUDENTS.MARKS
FROM GRADES, STUDENTS
WHERE STUDENTS.MARKS BETWEEN GRADES.MIN_MARK AND GRADES.MAX_MARK
ORDER BY GRADES.GRADE DESC, STUDENTS.NAME;
--Top Competitors
SELECT H.HACKER_ID, H.NAME
FROM HACKERS H
INNER JOIN SUBMISSIONS S
ON H.HACKER_ID = S.HACKER_ID
INNER JOIN CHALLENGES C
ON S.CHALLENGE_ID = C.CHALLENGE_ID
INNER JOIN DIFFICULTY D
ON C.DIFFICULTY_LEVEL = D.DIFFICULTY_LEVEL
WHERE S.SCORE = D.SCORE AND C.DIFFICULTY_LEVEL = D.DIFFICULTY_LEVEL
GROUP BY H.HACKER_ID, H.NAME
HAVING COUNT(S.HACKER_ID) > 1
ORDER BY COUNT(S.HACKER_ID) DESC, S.HACKER_ID ASC;
--Placements
Select S.NAME
FROM STUDENTS S 
JOIN FRIENDS F ON S.ID = F.ID
JOIN PACKAGES P1 ON S.ID = P1.ID
JOIN PACKAGES P2 ON F.FRIEND_ID = P2.ID
WHERE P2.SALARY > P1.SALARY
ORDER BY P2.SALARY;
--Type of Triangle
SELECT CASE 
WHEN A + B <= C OR A + C <= B OR B + C <= A THEN 'Not A Triangle' 
WHEN A = B AND B = C THEN 'Equilateral' 
WHEN A = B OR B = C OR A = C THEN 'Isosceles' 
ELSE 'Scalene' 
END 
FROM TRIANGLES;
--THE PADS
SELECT CONCAT(NAME,'(',SUBSTR(OCCUPATION,1,1),')') AS N
FROM OCCUPATIONS
ORDER BY N;
SELECT CONCAT('There are a total of ',COUNT(OCCUPATION),' ',LOWER(OCCUPATION),'s.')
FROM OCCUPATIONS
GROUP BY OCCUPATION
ORDER BY COUNT(OCCUPATION), OCCUPATION;
--Occupations


